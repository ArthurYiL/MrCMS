// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MrCMS.DbConfiguration;

namespace MrCMS.Web.Migrations
{
    [DbContext(typeof(WebsiteContext))]
    [Migration("20200307153841_InitialSetup")]
    partial class InitialSetup
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MrCMS.Batching.Entities.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Batch");
                });

            modelBuilder.Entity("MrCMS.Batching.Entities.BatchJob", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchId")
                        .HasColumnName("BatchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnName("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("Status")
                        .HasColumnType("int");

                    b.Property<int>("Tries")
                        .HasColumnName("Tries")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("discriminator")
                        .IsRequired()
                        .HasColumnName("discriminator")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("SiteId");

                    b.ToTable("BatchJob");

                    b.HasDiscriminator<string>("discriminator").HasValue("BatchJob");
                });

            modelBuilder.Entity("MrCMS.Batching.Entities.BatchRun", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("BatchId")
                        .HasColumnName("BatchId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatchId");

                    b.HasIndex("SiteId");

                    b.ToTable("BatchRun");
                });

            modelBuilder.Entity("MrCMS.Batching.Entities.BatchRunResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BatchJobId")
                        .HasColumnName("BatchJobId")
                        .HasColumnType("int");

                    b.Property<int>("BatchRunId")
                        .HasColumnName("BatchRunId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ExecutionOrder")
                        .HasColumnName("ExecutionOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MillisecondsTaken")
                        .HasColumnName("MillisecondsTaken")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnName("Status")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("BatchJobId");

                    b.HasIndex("BatchRunId");

                    b.HasIndex("SiteId");

                    b.ToTable("BatchRunResult");
                });

            modelBuilder.Entity("MrCMS.Entities.ACL.ACLRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserRoleId")
                        .HasColumnName("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("ACLRole");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.ContentBlock", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("WebpageId")
                        .HasColumnName("WebpageId")
                        .HasColumnType("int");

                    b.Property<string>("discriminator")
                        .IsRequired()
                        .HasColumnName("discriminator")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("WebpageId");

                    b.ToTable("ContentBlock");

                    b.HasDiscriminator<string>("discriminator").HasValue("ContentBlock");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Document", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("DocumentType")
                        .IsRequired()
                        .HasColumnName("DocumentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("HideInAdminNav")
                        .HasColumnName("HideInAdminNav")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(255)")
                        .HasMaxLength(255);

                    b.Property<int?>("ParentId")
                        .HasColumnName("ParentId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlSegment")
                        .HasColumnName("UrlSegment")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("SiteId");

                    b.ToTable("Document");

                    b.HasDiscriminator<string>("DocumentType").HasValue("Document");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.DocumentTag", b =>
                {
                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentId")
                        .HasColumnType("int");

                    b.Property<int>("TagId")
                        .HasColumnName("TagId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("DocumentTags");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.DocumentVersion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnName("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DocumentId")
                        .HasColumnName("DocumentId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("DocumentVersion");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Layout.LayoutArea", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AreaName")
                        .IsRequired()
                        .HasColumnName("AreaName")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayoutId")
                        .HasColumnName("LayoutId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.HasIndex("SiteId");

                    b.ToTable("LayoutArea");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Media.Crop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Bottom")
                        .HasColumnName("Bottom")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("CropTypeId")
                        .HasColumnName("CropTypeId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Left")
                        .HasColumnName("Left")
                        .HasColumnType("int");

                    b.Property<int>("MediaFileId")
                        .HasColumnName("MediaFileId")
                        .HasColumnType("int");

                    b.Property<int>("Right")
                        .HasColumnName("Right")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Top")
                        .HasColumnName("Top")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnName("Url")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CropTypeId");

                    b.HasIndex("MediaFileId");

                    b.HasIndex("SiteId");

                    b.ToTable("Crop");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Media.CropType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Height")
                        .HasColumnName("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Width")
                        .HasColumnName("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("CropType");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Media.MediaFile", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("ContentLength")
                        .HasColumnName("ContentLength")
                        .HasColumnType("bigint");

                    b.Property<string>("ContentType")
                        .HasColumnName("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<string>("FileExtension")
                        .HasColumnName("FileExtension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .HasColumnName("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileUrl")
                        .HasColumnName("FileUrl")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Height")
                        .HasColumnName("Height")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MediaCategoryId")
                        .HasColumnName("MediaCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("MediaFileType")
                        .IsRequired()
                        .HasColumnName("MediaFileType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("Width")
                        .HasColumnName("Width")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MediaCategoryId");

                    b.HasIndex("SiteId");

                    b.ToTable("MediaFile");

                    b.HasDiscriminator<string>("MediaFileType").HasValue("MrCMS.Entities.Documents.Media.MediaFile");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Media.ResizedImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("CropId")
                        .HasColumnName("CropId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("MediaFileId")
                        .HasColumnName("MediaFileId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .HasColumnName("Url")
                        .HasColumnType("nvarchar(450)")
                        .HasMaxLength(450);

                    b.HasKey("Id");

                    b.HasIndex("CropId");

                    b.HasIndex("MediaFileId");

                    b.HasIndex("SiteId");

                    b.ToTable("ResizedImage");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.Form", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeleteEntriesAfter")
                        .HasColumnName("DeleteEntriesAfter")
                        .HasColumnType("int");

                    b.Property<string>("FormDesign")
                        .HasColumnName("FormDesign")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormEmailTitle")
                        .HasColumnName("FormEmailTitle")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("FormMessage")
                        .HasColumnName("FormMessage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormRedirectUrl")
                        .HasColumnName("FormRedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FormSubmittedMessage")
                        .HasColumnName("FormSubmittedMessage")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SendByEmailOnly")
                        .HasColumnName("SendByEmailOnly")
                        .HasColumnType("bit");

                    b.Property<string>("SendFormTo")
                        .HasColumnName("SendFormTo")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<bool>("ShowGDPRConsentBox")
                        .HasColumnName("ShowGDPRConsentBox")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("SubmitButtonCssClass")
                        .HasColumnName("SubmitButtonCssClass")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("SubmitButtonText")
                        .HasColumnName("SubmitButtonText")
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Form");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormPosting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormId")
                        .HasColumnName("FormId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("SiteId");

                    b.ToTable("FormPosting");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.FormListOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormPropertyId")
                        .HasColumnName("FormPropertyId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("Selected")
                        .HasColumnName("Selected")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormPropertyId");

                    b.HasIndex("SiteId");

                    b.ToTable("FormListOption");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.FormProperty", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CssClass")
                        .HasColumnName("CssClass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("FormId")
                        .HasColumnName("FormId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("HtmlId")
                        .HasColumnName("HtmlId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LabelText")
                        .HasColumnName("LabelText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PropertyType")
                        .IsRequired()
                        .HasColumnName("PropertyType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Required")
                        .HasColumnName("Required")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("FormId");

                    b.HasIndex("SiteId");

                    b.ToTable("FormProperty");

                    b.HasDiscriminator<string>("PropertyType").HasValue("FormProperty");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("FormPostingId")
                        .HasColumnName("FormPostingId")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFile")
                        .HasColumnName("IsFile")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .HasColumnName("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("FormPostingId");

                    b.HasIndex("SiteId");

                    b.ToTable("FormValue");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FrontEndAllowedRole", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnName("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("WebpageId")
                        .HasColumnName("WebpageId")
                        .HasColumnType("int");

                    b.HasKey("RoleId", "WebpageId");

                    b.HasIndex("WebpageId");

                    b.ToTable("FrontEndAllowedRole");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.HiddenWidget", b =>
                {
                    b.Property<int>("WidgetId")
                        .HasColumnName("WidgetId")
                        .HasColumnType("int");

                    b.Property<int>("WebpageId")
                        .HasColumnName("WebpageId")
                        .HasColumnType("int");

                    b.HasKey("WidgetId", "WebpageId");

                    b.HasIndex("WebpageId");

                    b.ToTable("HiddenWidgets");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.PageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("LayoutId")
                        .HasColumnName("LayoutId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageTemplateName")
                        .IsRequired()
                        .HasColumnName("PageTemplateName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PageType")
                        .IsRequired()
                        .HasColumnName("PageType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("SingleUse")
                        .HasColumnName("SingleUse")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlGeneratorType")
                        .IsRequired()
                        .HasColumnName("UrlGeneratorType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.HasIndex("SiteId");

                    b.ToTable("PageTemplate");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.PageWidgetSort", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LayoutAreaId")
                        .HasColumnName("LayoutAreaId")
                        .HasColumnType("int");

                    b.Property<int>("Order")
                        .HasColumnName("Order")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("WebpageId")
                        .HasColumnName("WebpageId")
                        .HasColumnType("int");

                    b.Property<int>("WidgetId")
                        .HasColumnName("WidgetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LayoutAreaId");

                    b.HasIndex("SiteId");

                    b.HasIndex("WebpageId");

                    b.HasIndex("WidgetId");

                    b.ToTable("PageWidgetSort");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.ShownWidget", b =>
                {
                    b.Property<int>("WidgetId")
                        .HasColumnName("WidgetId")
                        .HasColumnType("int");

                    b.Property<int>("WebpageId")
                        .HasColumnName("WebpageId")
                        .HasColumnType("int");

                    b.HasKey("WidgetId", "WebpageId");

                    b.HasIndex("WebpageId");

                    b.ToTable("ShownWidgets");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.UrlHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("UrlSegment")
                        .IsRequired()
                        .HasColumnName("UrlSegment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WebpageId")
                        .HasColumnName("WebpageId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("WebpageId");

                    b.ToTable("UrlHistory");
                });

            modelBuilder.Entity("MrCMS.Entities.Messaging.LegacyMessageTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bcc")
                        .HasColumnName("Bcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .IsRequired()
                        .HasColumnName("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .HasColumnName("Cc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromAddress")
                        .IsRequired()
                        .HasColumnName("FromAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromName")
                        .IsRequired()
                        .HasColumnName("FromName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Imported")
                        .HasColumnName("Imported")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHtml")
                        .HasColumnName("IsHtml")
                        .HasColumnType("bit");

                    b.Property<string>("MessageTemplateType")
                        .HasColumnName("MessageTemplateType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnName("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToAddress")
                        .IsRequired()
                        .HasColumnName("ToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToName")
                        .HasColumnName("ToName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("MessageTemplate");
                });

            modelBuilder.Entity("MrCMS.Entities.Messaging.MessageTemplateData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnName("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("MessageTemplateData");
                });

            modelBuilder.Entity("MrCMS.Entities.Messaging.QueuedMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Bcc")
                        .HasColumnName("Bcc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Body")
                        .HasColumnName("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Cc")
                        .HasColumnName("Cc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FromAddress")
                        .HasColumnName("FromAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromName")
                        .HasColumnName("FromName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsHtml")
                        .HasColumnName("IsHtml")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("SentOn")
                        .HasColumnName("SentOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .HasColumnName("Subject")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToAddress")
                        .HasColumnName("ToAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToName")
                        .HasColumnName("ToName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Tries")
                        .HasColumnName("Tries")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("QueuedMessage");
                });

            modelBuilder.Entity("MrCMS.Entities.Messaging.QueuedMessageAttachment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContentType")
                        .HasColumnName("ContentType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte[]>("Data")
                        .HasColumnName("Data")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("FileName")
                        .HasColumnName("FileName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSize")
                        .HasColumnName("FileSize")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("QueuedMessageId")
                        .HasColumnName("QueuedMessageId")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("QueuedMessageId");

                    b.HasIndex("SiteId");

                    b.ToTable("QueuedMessageAttachment");
                });

            modelBuilder.Entity("MrCMS.Entities.Multisite.RedirectedDomain", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnName("Url")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("RedirectedDomain");
                });

            modelBuilder.Entity("MrCMS.Entities.Multisite.Site", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BaseUrl")
                        .IsRequired()
                        .HasColumnName("BaseUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StagingUrl")
                        .HasColumnName("StagingUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Site");
                });

            modelBuilder.Entity("MrCMS.Entities.Notifications.Notification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Message")
                        .HasColumnName("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationType")
                        .HasColumnName("NotificationType")
                        .HasColumnType("int");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("UserId");

                    b.ToTable("Notification");
                });

            modelBuilder.Entity("MrCMS.Entities.People.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("UserRole");
                });

            modelBuilder.Entity("MrCMS.Entities.People.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AvatarImage")
                        .HasColumnName("AvatarImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentEncryption")
                        .HasColumnName("CurrentEncryption")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DisableNotifications")
                        .HasColumnName("DisableNotifications")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnName("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnName("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsActive")
                        .HasColumnName("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastLoginDate")
                        .HasColumnName("LastLoginDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasColumnName("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastNotificationReadDate")
                        .HasColumnName("LastNotificationReadDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("LoginAttempts")
                        .HasColumnName("LoginAttempts")
                        .HasColumnType("int");

                    b.Property<byte[]>("PasswordHash")
                        .HasColumnName("PasswordHash")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("PasswordSalt")
                        .HasColumnName("PasswordSalt")
                        .HasColumnType("varbinary(max)");

                    b.Property<DateTime?>("ResetPasswordExpiry")
                        .HasColumnName("ResetPasswordExpiry")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("ResetPasswordGuid")
                        .HasColumnName("ResetPasswordGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Source")
                        .HasColumnName("Source")
                        .HasColumnType("nvarchar(200)")
                        .HasMaxLength(200);

                    b.Property<string>("TwoFactorCode")
                        .HasColumnName("TwoFactorCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("TwoFactorCodeExpiry")
                        .HasColumnName("TwoFactorCodeExpiry")
                        .HasColumnType("datetime2");

                    b.Property<string>("UICulture")
                        .HasColumnName("UICulture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("MrCMS.Entities.People.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Claim")
                        .HasColumnName("Claim")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Issuer")
                        .HasColumnName("Issuer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaim");
                });

            modelBuilder.Entity("MrCMS.Entities.People.UserLogin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .HasColumnName("DisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LoginProvider")
                        .HasColumnName("LoginProvider")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnName("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogin");
                });

            modelBuilder.Entity("MrCMS.Entities.People.UserProfileData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileInfoType")
                        .IsRequired()
                        .HasColumnName("ProfileInfoType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserProfileData");

                    b.HasDiscriminator<string>("ProfileInfoType").HasValue("UserProfileData");
                });

            modelBuilder.Entity("MrCMS.Entities.People.UserToRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .HasColumnName("UserRoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UsersToRoles");
                });

            modelBuilder.Entity("MrCMS.Entities.Resources.StringResource", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnName("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<string>("UICulture")
                        .HasColumnName("UICulture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("StringResource");
                });

            modelBuilder.Entity("MrCMS.Entities.Settings.Setting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyName")
                        .HasColumnName("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingType")
                        .HasColumnName("SettingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Setting");
                });

            modelBuilder.Entity("MrCMS.Entities.Settings.SystemSetting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("PropertyName")
                        .HasColumnName("PropertyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SettingType")
                        .HasColumnName("SettingType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .HasColumnName("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SystemSetting");
                });

            modelBuilder.Entity("MrCMS.Entities.Widget.Widget", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Cache")
                        .HasColumnName("Cache")
                        .HasColumnType("bit");

                    b.Property<int>("CacheExpiryType")
                        .HasColumnName("CacheExpiryType")
                        .HasColumnType("int");

                    b.Property<int>("CacheLength")
                        .HasColumnName("CacheLength")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomLayout")
                        .HasColumnName("CustomLayout")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnName("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRecursive")
                        .HasColumnName("IsRecursive")
                        .HasColumnType("bit");

                    b.Property<int>("LayoutAreaId")
                        .HasColumnName("LayoutAreaId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnName("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("WebpageId")
                        .HasColumnName("WebpageId")
                        .HasColumnType("int");

                    b.Property<string>("WidgetType")
                        .IsRequired()
                        .HasColumnName("WidgetType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("LayoutAreaId");

                    b.HasIndex("SiteId");

                    b.HasIndex("WebpageId");

                    b.ToTable("Widget");

                    b.HasDiscriminator<string>("WidgetType").HasValue("Widget");
                });

            modelBuilder.Entity("MrCMS.Indexing.Management.LuceneFieldBoost", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<float>("Boost")
                        .HasColumnName("Boost")
                        .HasColumnType("real");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Definition")
                        .HasColumnName("Definition")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("LuceneFieldBoost");
                });

            modelBuilder.Entity("MrCMS.Logging.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Detail")
                        .HasColumnName("Detail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExceptionData")
                        .HasColumnName("ExceptionData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("LogLevel")
                        .HasColumnName("LogLevel")
                        .HasColumnType("int");

                    b.Property<string>("Message")
                        .HasColumnName("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RequestData")
                        .HasColumnName("RequestData")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("Log");
                });

            modelBuilder.Entity("MrCMS.Tasks.Entities.TaskSettings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Enabled")
                        .HasColumnName("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("FrequencyInSeconds")
                        .HasColumnName("FrequencyInSeconds")
                        .HasColumnType("int");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastCompleted")
                        .HasColumnName("LastCompleted")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastStarted")
                        .HasColumnName("LastStarted")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnName("Status")
                        .HasColumnType("int");

                    b.Property<string>("TypeName")
                        .HasColumnName("TypeName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("TaskSettings");
                });

            modelBuilder.Entity("MrCMS.Tasks.QueuedTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Id")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("CompletedAt")
                        .HasColumnName("CompletedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnName("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .HasColumnName("Data")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("FailedAt")
                        .HasColumnName("FailedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnName("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnName("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("Priority")
                        .HasColumnName("Priority")
                        .HasColumnType("int");

                    b.Property<DateTime?>("QueuedAt")
                        .HasColumnName("QueuedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("SiteId")
                        .HasColumnName("SiteId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartedAt")
                        .HasColumnName("StartedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("Status")
                        .HasColumnName("Status")
                        .HasColumnType("int");

                    b.Property<int>("Tries")
                        .HasColumnName("Tries")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnName("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedOn")
                        .HasColumnName("UpdatedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("QueuedTask");
                });

            modelBuilder.Entity("MrCMS.Batching.CoreJobs.RebuildLuceneIndex", b =>
                {
                    b.HasBaseType("MrCMS.Batching.Entities.BatchJob");

                    b.Property<string>("IndexName")
                        .HasColumnName("IndexName")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Batching.CoreJobs.RebuildLuceneIndex");
                });

            modelBuilder.Entity("MrCMS.Batching.CoreJobs.RebuildUniversalSearchIndex", b =>
                {
                    b.HasBaseType("MrCMS.Batching.Entities.BatchJob");

                    b.HasDiscriminator().HasValue("MrCMS.Batching.CoreJobs.RebuildUniversalSearchIndex");
                });

            modelBuilder.Entity("MrCMS.Services.FileMigration.MigrateFilesBatchJob", b =>
                {
                    b.HasBaseType("MrCMS.Batching.Entities.BatchJob");

                    b.HasDiscriminator().HasValue("MrCMS.Services.FileMigration.MigrateFilesBatchJob");
                });

            modelBuilder.Entity("MrCMS.Services.ImportExport.BatchJobs.ImportDocumentBatchJob", b =>
                {
                    b.HasBaseType("MrCMS.Batching.Entities.BatchJob");

                    b.Property<string>("UrlSegment")
                        .HasColumnName("UrlSegment")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Services.ImportExport.BatchJobs.ImportDocumentBatchJob");
                });

            modelBuilder.Entity("MrCMS.Services.WebsiteManagement.CompleteMergeBatchJob", b =>
                {
                    b.HasBaseType("MrCMS.Batching.Entities.BatchJob");

                    b.Property<int>("MergedIntoId")
                        .HasColumnName("MergedIntoId")
                        .HasColumnType("int");

                    b.Property<int>("WebpageId")
                        .HasColumnName("WebpageId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MrCMS.Services.WebsiteManagement.CompleteMergeBatchJob");
                });

            modelBuilder.Entity("MrCMS.Services.WebsiteManagement.MoveWebpageBatchJob", b =>
                {
                    b.HasBaseType("MrCMS.Batching.Entities.BatchJob");

                    b.Property<int?>("NewParentId")
                        .HasColumnName("NewParentId")
                        .HasColumnType("int");

                    b.Property<int>("WebpageId")
                        .HasColumnName("WebpageId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MrCMS.Services.WebsiteManagement.MoveWebpageBatchJob");
                });

            modelBuilder.Entity("MrCMS.Services.WebsiteManagement.UpdateUrlBatchJob", b =>
                {
                    b.HasBaseType("MrCMS.Batching.Entities.BatchJob");

                    b.Property<string>("NewUrl")
                        .HasColumnName("NewUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WebpageId")
                        .HasColumnName("WebpageId")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MrCMS.Services.WebsiteManagement.UpdateUrlBatchJob");
                });

            modelBuilder.Entity("MrCMS.Website.PushNotifications.SendPushNotificationBatchJob", b =>
                {
                    b.HasBaseType("MrCMS.Batching.Entities.BatchJob");

                    b.HasDiscriminator().HasValue("MrCMS.Website.PushNotifications.SendPushNotificationBatchJob");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.ContentBlocks.PlainBlock", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.ContentBlock");

                    b.Property<string>("Text")
                        .HasColumnName("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.ContentBlocks.PlainBlock");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Layout.Layout", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Document");

                    b.Property<bool>("Hidden")
                        .HasColumnName("Hidden")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Layout.Layout");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Media.MediaCategory", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Document");

                    b.Property<bool>("IsGallery")
                        .HasColumnName("IsGallery")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasColumnName("MetaDescription")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MetaTitle")
                        .HasColumnName("MetaTitle")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Media.MediaCategory");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.Webpage", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Document");

                    b.Property<bool>("BlockAnonymousAccess")
                        .HasColumnName("BlockAnonymousAccess")
                        .HasColumnType("bit");

                    b.Property<string>("BodyContent")
                        .HasColumnName("BodyContent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustomFooterScripts")
                        .HasColumnName("CustomFooterScripts")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(8000);

                    b.Property<string>("CustomHeaderScripts")
                        .HasColumnName("CustomHeaderScripts")
                        .HasColumnType("nvarchar(max)")
                        .HasMaxLength(8000);

                    b.Property<bool>("DoNotCache")
                        .HasColumnName("DoNotCache")
                        .HasColumnType("bit");

                    b.Property<string>("ExplicitCanonicalLink")
                        .HasColumnName("ExplicitCanonicalLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("HasCustomPermissions")
                        .HasColumnName("HasCustomPermissions")
                        .HasColumnType("bit");

                    b.Property<bool>("IncludeInSitemap")
                        .HasColumnName("IncludeInSitemap")
                        .HasColumnType("bit");

                    b.Property<bool>("InheritFrontEndRolesFromParent")
                        .HasColumnName("InheritFrontEndRolesFromParent")
                        .HasColumnType("bit");

                    b.Property<string>("MetaDescription")
                        .HasColumnName("MetaDescription")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MetaKeywords")
                        .HasColumnName("MetaKeywords")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<string>("MetaTitle")
                        .HasColumnName("MetaTitle")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.Property<int?>("PageTemplateId")
                        .HasColumnName("PageTemplateId")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnName("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("PasswordAccessToken")
                        .HasColumnName("PasswordAccessToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("PermissionType")
                        .HasColumnName("PermissionType")
                        .HasColumnType("int");

                    b.Property<DateTime?>("PublishOn")
                        .HasColumnName("PublishOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Published")
                        .HasColumnName("Published")
                        .HasColumnType("bit");

                    b.Property<bool>("RequiresSSL")
                        .HasColumnName("RequiresSSL")
                        .HasColumnType("bit");

                    b.Property<bool>("RevealInNavigation")
                        .HasColumnName("RevealInNavigation")
                        .HasColumnType("bit");

                    b.Property<string>("SEOTargetPhrase")
                        .HasColumnName("SEOTargetPhrase")
                        .HasColumnType("nvarchar(250)")
                        .HasMaxLength(250);

                    b.HasIndex("PageTemplateId");

                    b.HasDiscriminator().HasValue("Webpage");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.Email", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.FormProperties.FormProperty");

                    b.Property<string>("PlaceHolder")
                        .HasColumnName("PlaceHolder")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Web.FormProperties.Email");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.FileUpload", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.FormProperties.FormProperty");

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Web.FormProperties.FileUpload");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.FormPropertyWithOptions", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.FormProperties.FormProperty");

                    b.HasDiscriminator().HasValue("FormPropertyWithOptions");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.TextArea", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.FormProperties.FormProperty");

                    b.Property<string>("PlaceHolder")
                        .HasColumnName("PlaceHolder")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Web.FormProperties.TextArea");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.TextBox", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.FormProperties.FormProperty");

                    b.Property<string>("PlaceHolder")
                        .HasColumnName("PlaceHolder")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Web.FormProperties.TextBox");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Articles.Entities.AuthorInfo", b =>
                {
                    b.HasBaseType("MrCMS.Entities.People.UserProfileData");

                    b.Property<string>("Bio")
                        .HasColumnName("Bio")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Articles.Entities.AuthorInfo");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Articles.Widgets.ArticleArchive", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Widget.Widget");

                    b.Property<int>("ArticleListId")
                        .HasColumnName("ArticleListId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowNameAsTitle")
                        .HasColumnName("ShowNameAsTitle")
                        .HasColumnType("bit");

                    b.HasIndex("ArticleListId");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Articles.Widgets.ArticleArchive");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Articles.Widgets.ArticleCategories", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Widget.Widget");

                    b.Property<int>("ArticleListId")
                        .HasColumnName("ArticleListId")
                        .HasColumnType("int");

                    b.Property<bool>("ShowNameAsTitle")
                        .HasColumnName("ShowNameAsTitle")
                        .HasColumnType("bit");

                    b.HasIndex("ArticleListId")
                        .HasName("IX_Widget_ArticleListId1");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Articles.Widgets.ArticleCategories");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Articles.Widgets.LatestXArticles", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Widget.Widget");

                    b.Property<int>("NumberOfArticles")
                        .HasColumnName("NumberOfArticles")
                        .HasColumnType("int");

                    b.Property<int>("RelatedNewsListId")
                        .HasColumnName("RelatedNewsListId")
                        .HasColumnType("int");

                    b.HasIndex("RelatedNewsListId");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Articles.Widgets.LatestXArticles");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Widgets.CurrentPageSubNavigation", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Widget.Widget");

                    b.Property<bool>("ShowNameAsTitle")
                        .HasColumnName("ShowNameAsTitle")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Widgets.CurrentPageSubNavigation");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Widgets.LinkedImage", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Widget.Widget");

                    b.Property<string>("Image")
                        .HasColumnName("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnName("Link")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Widgets.LinkedImage");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Widgets.Navigation", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Widget.Widget");

                    b.Property<bool>("IncludeChildren")
                        .HasColumnName("IncludeChildren")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Widgets.Navigation");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Widgets.PlainTextWidget", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Widget.Widget");

                    b.Property<string>("Text")
                        .HasColumnName("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Widgets.PlainTextWidget");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Widgets.Slider", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Widget.Widget");

                    b.Property<string>("Description")
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description1")
                        .HasColumnName("Description1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description2")
                        .HasColumnName("Description2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description3")
                        .HasColumnName("Description3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image")
                        .HasColumnName("Image")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image1")
                        .HasColumnName("Image1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image2")
                        .HasColumnName("Image2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Image3")
                        .HasColumnName("Image3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link")
                        .HasColumnName("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link1")
                        .HasColumnName("Link1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link2")
                        .HasColumnName("Link2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link3")
                        .HasColumnName("Link3")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Widgets.Slider");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Widgets.TextWidget", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Widget.Widget");

                    b.Property<string>("Text")
                        .HasColumnName("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Widgets.TextWidget");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Widgets.UserLinks", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Widget.Widget");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Widgets.UserLinks");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.Redirect", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.Webpage");

                    b.Property<bool>("Permanent")
                        .HasColumnName("Permanent")
                        .HasColumnType("bit");

                    b.Property<string>("RedirectUrl")
                        .HasColumnName("RedirectUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Web.Redirect");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.SitemapPlaceholder", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.Webpage");

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Web.SitemapPlaceholder");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Pages.TextPage", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.Webpage");

                    b.Property<string>("FeatureImage")
                        .HasColumnName("FeatureImage")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Pages.TextPage");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.CheckboxList", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.FormProperties.FormPropertyWithOptions");

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Web.FormProperties.CheckboxList");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.DropDownList", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.FormProperties.FormPropertyWithOptions");

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Web.FormProperties.DropDownList");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.RadioButtonList", b =>
                {
                    b.HasBaseType("MrCMS.Entities.Documents.Web.FormProperties.FormPropertyWithOptions");

                    b.HasDiscriminator().HasValue("MrCMS.Entities.Documents.Web.FormProperties.RadioButtonList");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Articles.Pages.Article", b =>
                {
                    b.HasBaseType("MrCMS.Web.Apps.Core.Pages.TextPage");

                    b.Property<string>("Abstract")
                        .HasColumnName("Abstract")
                        .HasColumnType("nvarchar(500)")
                        .HasMaxLength(500);

                    b.Property<int>("UserId")
                        .HasColumnName("UserId")
                        .HasColumnType("int");

                    b.HasIndex("UserId");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Articles.Pages.Article");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Articles.Pages.ArticleList", b =>
                {
                    b.HasBaseType("MrCMS.Web.Apps.Core.Pages.TextPage");

                    b.Property<bool>("AllowPaging")
                        .HasColumnName("AllowPaging")
                        .HasColumnType("bit");

                    b.Property<int>("PageSize")
                        .HasColumnName("PageSize")
                        .HasColumnType("int");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Articles.Pages.ArticleList");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Pages.ForgottenPasswordPage", b =>
                {
                    b.HasBaseType("MrCMS.Web.Apps.Core.Pages.TextPage");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Pages.ForgottenPasswordPage");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Pages.LoginPage", b =>
                {
                    b.HasBaseType("MrCMS.Web.Apps.Core.Pages.TextPage");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Pages.LoginPage");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Pages.RegisterPage", b =>
                {
                    b.HasBaseType("MrCMS.Web.Apps.Core.Pages.TextPage");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Pages.RegisterPage");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Pages.ResetPasswordPage", b =>
                {
                    b.HasBaseType("MrCMS.Web.Apps.Core.Pages.TextPage");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Pages.ResetPasswordPage");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Pages.SearchPage", b =>
                {
                    b.HasBaseType("MrCMS.Web.Apps.Core.Pages.TextPage");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Pages.SearchPage");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Pages.TwoFactorCodePage", b =>
                {
                    b.HasBaseType("MrCMS.Web.Apps.Core.Pages.TextPage");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Pages.TwoFactorCodePage");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Pages.UserAccountPage", b =>
                {
                    b.HasBaseType("MrCMS.Web.Apps.Core.Pages.TextPage");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Pages.UserAccountPage");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Core.Pages.WebpagePasswordPage", b =>
                {
                    b.HasBaseType("MrCMS.Web.Apps.Core.Pages.TextPage");

                    b.HasDiscriminator().HasValue("MrCMS.Web.Apps.Core.Pages.WebpagePasswordPage");
                });

            modelBuilder.Entity("MrCMS.Batching.Entities.Batch", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Batching.Entities.BatchJob", b =>
                {
                    b.HasOne("MrCMS.Batching.Entities.Batch", "Batch")
                        .WithMany("BatchJobs")
                        .HasForeignKey("BatchId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Batching.Entities.BatchRun", b =>
                {
                    b.HasOne("MrCMS.Batching.Entities.Batch", "Batch")
                        .WithMany("BatchRuns")
                        .HasForeignKey("BatchId");

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Batching.Entities.BatchRunResult", b =>
                {
                    b.HasOne("MrCMS.Batching.Entities.BatchJob", "BatchJob")
                        .WithMany("BatchRunResults")
                        .HasForeignKey("BatchJobId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Batching.Entities.BatchRun", "BatchRun")
                        .WithMany("BatchRunResults")
                        .HasForeignKey("BatchRunId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.ACL.ACLRole", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.People.Role", "UserRole")
                        .WithMany("ACLRoles")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.ContentBlock", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Documents.Web.Webpage", "Webpage")
                        .WithMany("ContentBlocks")
                        .HasForeignKey("WebpageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Document", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Document", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.DocumentTag", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Document", "Document")
                        .WithMany("DocumentTags")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Documents.Tag", "Tag")
                        .WithMany("DocumentTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.DocumentVersion", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Document", "Document")
                        .WithMany()
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.People.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Layout.LayoutArea", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Layout.Layout", "Layout")
                        .WithMany("LayoutAreas")
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Media.Crop", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Media.CropType", "CropType")
                        .WithMany()
                        .HasForeignKey("CropTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Documents.Media.MediaFile", "MediaFile")
                        .WithMany("Crops")
                        .HasForeignKey("MediaFileId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Media.CropType", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Media.MediaFile", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Media.MediaCategory", "MediaCategory")
                        .WithMany("Files")
                        .HasForeignKey("MediaCategoryId");

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Media.ResizedImage", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Media.Crop", "Crop")
                        .WithMany("ResizedImages")
                        .HasForeignKey("CropId");

                    b.HasOne("MrCMS.Entities.Documents.Media.MediaFile", "MediaFile")
                        .WithMany("ResizedImages")
                        .HasForeignKey("MediaFileId");

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Tag", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.Form", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormPosting", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Web.Form", "Form")
                        .WithMany("FormPostings")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.FormListOption", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Web.FormProperties.FormPropertyWithOptions", "FormProperty")
                        .WithMany("Options")
                        .HasForeignKey("FormPropertyId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormProperties.FormProperty", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Web.Form", "Form")
                        .WithMany("FormProperties")
                        .HasForeignKey("FormId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FormValue", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Web.FormPosting", "FormPosting")
                        .WithMany("FormValues")
                        .HasForeignKey("FormPostingId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.FrontEndAllowedRole", b =>
                {
                    b.HasOne("MrCMS.Entities.People.Role", "Role")
                        .WithMany("FrontEndAllowedRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Documents.Web.Webpage", "Webpage")
                        .WithMany("FrontEndAllowedRoles")
                        .HasForeignKey("WebpageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.HiddenWidget", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Web.Webpage", "Webpage")
                        .WithMany()
                        .HasForeignKey("WebpageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Widget.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.PageTemplate", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Layout.Layout", "Layout")
                        .WithMany("PageTemplates")
                        .HasForeignKey("LayoutId");

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.PageWidgetSort", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Layout.LayoutArea", "LayoutArea")
                        .WithMany()
                        .HasForeignKey("LayoutAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Documents.Web.Webpage", "Webpage")
                        .WithMany()
                        .HasForeignKey("WebpageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Widget.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.ShownWidget", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Web.Webpage", "Webpage")
                        .WithMany()
                        .HasForeignKey("WebpageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Widget.Widget", "Widget")
                        .WithMany()
                        .HasForeignKey("WidgetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.UrlHistory", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Documents.Web.Webpage", "Webpage")
                        .WithMany("Urls")
                        .HasForeignKey("WebpageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Messaging.LegacyMessageTemplate", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Messaging.QueuedMessage", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Messaging.QueuedMessageAttachment", b =>
                {
                    b.HasOne("MrCMS.Entities.Messaging.QueuedMessage", "QueuedMessage")
                        .WithMany("QueuedMessageAttachments")
                        .HasForeignKey("QueuedMessageId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Multisite.RedirectedDomain", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany("RedirectedDomains")
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Notifications.Notification", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.People.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("MrCMS.Entities.People.UserClaim", b =>
                {
                    b.HasOne("MrCMS.Entities.People.User", "User")
                        .WithMany("UserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.People.UserLogin", b =>
                {
                    b.HasOne("MrCMS.Entities.People.User", "User")
                        .WithMany("UserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.People.UserProfileData", b =>
                {
                    b.HasOne("MrCMS.Entities.People.User", "User")
                        .WithMany("UserProfileData")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.People.UserToRole", b =>
                {
                    b.HasOne("MrCMS.Entities.People.User", "User")
                        .WithMany("UserToRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.People.Role", "UserRole")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Resources.StringResource", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("MrCMS.Entities.Settings.Setting", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Widget.Widget", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Layout.LayoutArea", "LayoutArea")
                        .WithMany("Widgets")
                        .HasForeignKey("LayoutAreaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("MrCMS.Entities.Documents.Web.Webpage", "Webpage")
                        .WithMany("Widgets")
                        .HasForeignKey("WebpageId");
                });

            modelBuilder.Entity("MrCMS.Indexing.Management.LuceneFieldBoost", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Logging.Log", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Tasks.QueuedTask", b =>
                {
                    b.HasOne("MrCMS.Entities.Multisite.Site", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Entities.Documents.Web.Webpage", b =>
                {
                    b.HasOne("MrCMS.Entities.Documents.Web.PageTemplate", "PageTemplate")
                        .WithMany()
                        .HasForeignKey("PageTemplateId");
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Articles.Widgets.ArticleArchive", b =>
                {
                    b.HasOne("MrCMS.Web.Apps.Articles.Pages.ArticleList", "ArticleList")
                        .WithMany()
                        .HasForeignKey("ArticleListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Articles.Widgets.ArticleCategories", b =>
                {
                    b.HasOne("MrCMS.Web.Apps.Articles.Pages.ArticleList", "ArticleList")
                        .WithMany()
                        .HasForeignKey("ArticleListId")
                        .HasConstraintName("FK_Widget_Document_ArticleListId1")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Articles.Widgets.LatestXArticles", b =>
                {
                    b.HasOne("MrCMS.Web.Apps.Articles.Pages.ArticleList", "RelatedNewsList")
                        .WithMany()
                        .HasForeignKey("RelatedNewsListId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });

            modelBuilder.Entity("MrCMS.Web.Apps.Articles.Pages.Article", b =>
                {
                    b.HasOne("MrCMS.Entities.People.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
